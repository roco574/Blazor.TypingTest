@page "/typing-test-v1"

@using Blazor.TypingTest.Helpers

<h2 class="fs-2 fw-normal pb-2">Typing Test V1</h2>

<div class="d-flex flex-nowrap overflow-x-auto p-2 mb-3 rounded-3 upcoming-words">
    @foreach (var word in dictionary.Skip(currentIndex).Take(10))
    {
        <span class="fs-5 me-2 @(highlightedText == word ? "fw-bold" : "upcoming-word")">@word</span>
    }
</div>

<div class="pb-2 w-25">
    <input @bind-value="typedText" @oninput="CheckTypedText" class="form-control form-control-lg" />
</div>

<div class="pb-4">
    <button @onclick="StartTest" class="btn btn-primary btn-large me-md-2" style="background-color: #2196f3;">Start Test</button>
    <button @onclick="StopTest" class="btn btn-danger btn-large" style="background-color: #f44336;">Stop Test</button>
</div>

<div class="pb-4 fw-light fs-5">
    <p>Time remaining: <span class="fw-normal" style="color: #2196f3;">@timeRemaining</span> seconds</p>
    <p>Words per minute: <span class="fw-normal" style="color: #4caf50;">@wordsPerMinute</span></p>
    <p>Accuracy: <span class="fw-normal" style="color: #4caf50;">@accuracy.ToString("0.0")%</span></p>
</div>

@code {
    private List<string> dictionary { get; set; }
    private string highlightedText = "";
    private string typedText = "";
    private int currentIndex { get; set; }
    private int correctCount { get; set; }
    private int incorrectCount { get; set; }
    private int duration { get; set; }
    private int timeRemaining { get; set; }
    private int wordsPerMinute { get; set; }
    private double accuracy { get; set; }
    private System.Timers.Timer timer { get; set; }

    protected override void OnInitialized()
    {
        dictionary = DictionaryHelper.Shuffle(DictionaryHelper.ComplexWords);
        timeRemaining = duration = 60;
    }

    private void StartTest()
    {
        if (currentIndex != 0)
            dictionary = DictionaryHelper.Shuffle(DictionaryHelper.ComplexWords);

        highlightedText = dictionary[currentIndex];
        typedText = "";
        timeRemaining = duration = 60;
        correctCount = 0;
        incorrectCount = 0;
        wordsPerMinute = 0;
        accuracy = 0;

        timer = new System.Timers.Timer();
        timer.Interval = 1000;
        timer.Elapsed += DecrementTimeRemaining;
        timer.Start();
    }

    private void StopTest()
    {
        if (timer is not null)
        {
            timer.Stop();
            timeRemaining = 0;
        }
    }

    private void DecrementTimeRemaining(object sender, System.Timers.ElapsedEventArgs e)
    {
        timeRemaining--;
        if (timeRemaining == 0)
        {
            timer.Stop();
            CalculateWordsPerMinute();
            CalculateAccuracy();
        }
        else
        {
            StateHasChanged();
        }
    }

    private void CalculateWordsPerMinute()
    {
        int totalWords = correctCount + incorrectCount;
        double accuracy = (double)correctCount / totalWords;
        double timeFactor = (double)timeRemaining / duration;
        double timeAdjustment = 1 / (1 - timeFactor);
        wordsPerMinute = (int)Math.Round((accuracy * totalWords * timeAdjustment) / duration * 60);
    }

    private void CalculateAccuracy()
    {
        var totalCount = correctCount + incorrectCount;

        accuracy = totalCount != 0
            ? ((double)correctCount / totalCount) * 100
            : 0;
    }

    private void CheckTypedText(ChangeEventArgs e)
    {
        if (timeRemaining == 0)
            return;
        else if (timer is null || !timer.Enabled)
            StartTest();

        typedText = e.Value.ToString();

        if (typedText.Length == highlightedText.Length)
        {
            if (typedText == highlightedText)
                correctCount++;
            else
                incorrectCount++;

            GetNextWord();
            CalculateWordsPerMinute();
            CalculateAccuracy();
            CalculateAccuracy();
        }

        StateHasChanged();
    }

    private void GetNextWord()
    {
        currentIndex++;
        if (currentIndex == dictionary.Count)
        {
            currentIndex = 0;
            dictionary = DictionaryHelper.Shuffle(DictionaryHelper.ComplexWords);
        }
        highlightedText = dictionary[currentIndex];
        typedText = "";
    }
}