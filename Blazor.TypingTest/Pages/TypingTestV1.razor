@page "/typing-test-v1"

@using Blazor.TypingTest.Helpers

<h1 style="font-family: 'Roboto', sans-serif; font-weight: 400; font-size: 2rem;">Typing Test</h1>

<div class="upcoming-words">
    @foreach (var word in dictionary.Skip(currentIndex).Take(10))
    {
        <span class="upcoming-word @(highlightedText == word ? "current" : "")">@word</span>
    }
</div>

<div style="padding-bottom: 2rem;">
    <input style="font-family: 'Roboto', sans-serif; font-size: 1.5rem; padding: 0.5rem 1rem; border: 2px solid #ddd; border-radius: 4px; outline: none;" @bind-value="typedText" @oninput="CheckTypedText" />
</div>

<div style="padding-bottom: 2rem;">
    <button style="background-color: #2196f3; color: #fff; font-family: 'Roboto', sans-serif; font-size: 1.2rem; font-weight: 500; padding: 0.5rem 1rem; border: none; border-radius: 4px; cursor: pointer; margin-right: 1rem;" @onclick="StartTest">Start Test</button>
    <button style="background-color: #f44336; color: #fff; font-family: 'Roboto', sans-serif; font-size: 1.2rem; font-weight: 500; padding: 0.5rem 1rem; border: none; border-radius: 4px; cursor: pointer;" @onclick="StopTest">Stop Test</button>
</div>

<div style="font-family: 'Roboto', sans-serif; font-size: 1.2rem; font-weight: 300; padding-bottom: 2rem;">
    <p>Time remaining: <span style="font-weight: 500; color: #2196f3;">@timeRemaining</span> seconds</p>
    <p>Words per minute: <span style="font-weight: 500; color: #4caf50;">@wordsPerMinute</span></p>
    <p>Accuracy: <span style="font-weight: 500; color: #4caf50;">@accuracy.ToString("0.0") %</span></p>
</div>

@code {
    private List<string> dictionary { get; set; }
    private string highlightedText = "";
    private string typedText = "";
    private int currentIndex { get; set; }
    private int correctCount { get; set; }
    private int incorrectCount { get; set; }
    private int duration { get; set; }
    private int timeRemaining { get; set; }
    private int wordsPerMinute { get; set; }
    private double accuracy { get; set; }
    private System.Timers.Timer timer { get; set; }

    protected override void OnInitialized()
    {
        dictionary = DictionaryHelper.Shuffle(DictionaryHelper.ComplexWords);
    }

    private void StartTest()
    {
        if (currentIndex != 0)
            dictionary = DictionaryHelper.Shuffle(DictionaryHelper.ComplexWords);

        highlightedText = dictionary[currentIndex];
        typedText = "";
        timeRemaining = duration = 60;
        correctCount = 0;
        incorrectCount = 0;
        wordsPerMinute = 0;
        accuracy = 0;

        timer = new System.Timers.Timer();
        timer.Interval = 1000;
        timer.Elapsed += DecrementTimeRemaining;
        timer.Start();
    }

    private void StopTest()
    {
        timer.Stop();
        timeRemaining = 0;
    }

    private void DecrementTimeRemaining(object sender, System.Timers.ElapsedEventArgs e)
    {
        timeRemaining--;
        if (timeRemaining == 0)
        {
            timer.Stop();
            CalculateWordsPerMinute();
        }
        else
        {
            StateHasChanged();
        }
    }

    private void CalculateWordsPerMinute()
    {
        int totalWords = correctCount + incorrectCount;
        double accuracy = (double)correctCount / totalWords;
        double timeFactor = (double)timeRemaining / duration;
        double timeAdjustment = 1 / (1 - timeFactor);
        wordsPerMinute = (int)Math.Round((accuracy * totalWords * timeAdjustment) / duration * 60);
    }

    private void CalculateAccuracy()
    {
        var totalCount = correctCount + incorrectCount;

        accuracy = totalCount != 0
            ? ((double)correctCount / totalCount) * 100
            : 0;
    }

    private void CheckTypedText(ChangeEventArgs e)
    {
        if (timeRemaining == 0)
            return;
        else if (timer is null || !timer.Enabled)
            StartTest();

        typedText = e.Value.ToString();

        if (typedText.Length == highlightedText.Length)
        {
            if (typedText == highlightedText)
                correctCount++;
            else
                incorrectCount++;

            GetNextWord();
            CalculateWordsPerMinute();
            CalculateAccuracy();
            CalculateAccuracy();
        }

        StateHasChanged();
    }

    private void GetNextWord()
    {
        currentIndex++;
        if (currentIndex == dictionary.Count)
        {
            currentIndex = 0;
            dictionary = DictionaryHelper.Shuffle(DictionaryHelper.ComplexWords);
        }
        highlightedText = dictionary[currentIndex];
        typedText = "";
    }
}


<style>
    .upcoming-words {
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
        padding: 10px;
        background-color: #f5f5f5;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .upcoming-word {
        font-size: 18px;
        margin-right: 10px;
        color: #888;
    }

    .upcoming-word.current {
        color: #000;
        font-weight: bold;
    }
</style>